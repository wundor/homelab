---
- set_fact:
    time: "{{ ansible_date_time.iso8601_basic_short }}"

- name: Include vault
  include_vars: vault.yml

- block:
    - name: Create ZFS snapshots
      zfs:
        name: "{{ zfs_pool }}/{{ item.value }}@backup-{{ time }}"
        state: present
      loop: "{{ zfs | dict2items }}"

    - name: Check if restic is here
      stat:
        path: "{{ restic.path }}"
      register: restic_installed

    - name: Fail when restic is not installed
      fail:
        msg: "Restic is not found in {{ restic.path }} wtf"
      when: not restic_installed.stat.exists

    - name: Self update restic
      shell: "{{ restic.path }} self-update"
      when: restic_installed.stat.exists

    - name: Sanitize service name
      set_fact:
        bucket: "testchamber-backup-{{ service | replace('_','-') }}"

    - name: Create {{ service }} backup directory
      file:
        path: "/mnt/{{ bucket }}"
        state: directory
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"

    - name: Mount ZFS datasets
      mount:
        src: "{{ zfs_pool }}/{{ item.value }}@backup-{{ time }}"
        path: "/mnt/{{ bucket }}/{{ item.key }}"
        state: mounted
        fstab: /tmp/tmp.fstab # fake fstab
        fstype: zfs
      loop: "{{ zfs | dict2items }}"

    - set_fact:
        # restic_cmd: 'RESTIC_PASSWORD={{ restic.pass }} B2_ACCOUNT_ID={{ b2.account_id }} B2_ACCOUNT_KEY={{ b2.account_key }} {{ restic.path }} -r b2:{{ bucket }}'
        restic_cmd: "RESTIC_PASSWORD={{ restic.pass }} AWS_ACCESS_KEY_ID={{ s3.id }} AWS_SECRET_ACCESS_KEY={{ s3.key }} AWS_DEFAULT_REGION=ru-central1 RESTIC_REPOSITORY=s3:{{ s3.endpoint }}/{{ bucket }} {{ restic.path }}"

    - name: Create {{ bucket }} s3 bucket
      amazon.aws.aws_s3:
        bucket: "{{ bucket }}"
        s3_url: "{{ s3.endpoint }}"
        region: "ru-central1"
        aws_access_key: "{{ s3.id }}"
        aws_secret_key: "{{ s3.key }}"
        mode: create
        permission: private
      delegate_to: localhost
      become: false

    - name: Check if restic repo {{ bucket }} is here
      shell: "{{ restic_cmd }} snapshots || {{ restic_cmd }} init"
      register: output

    - debug: var=output.stdout_lines

    - name: Unlock {{ service }} repo
      shell: "{{ restic_cmd }} unlock"
      register: output

    - debug: var=output.stdout_lines

    - name: Backup {{ service }}
      shell: "{{ restic_cmd }} backup /mnt/{{ bucket }}"
      register: output

    - debug: var=output.stdout_lines

    - name: Unlock {{ service }} repo
      shell: "{{ restic_cmd }} unlock"
      register: output

    - debug: var=output.stdout_lines

    - name: Prune old backups for {{ service }}
      shell: "{{ restic_cmd }} forget --keep-daily 1 --keep-weekly 3 --keep-monthly 6 --prune"
      register: output

    - debug: var=output.stdout_lines

    - name: Check restic repo for {{ service }}
      shell: "{{ restic_cmd }} check"
      register: output

    - debug: var=output.stdout_lines

    - name: Healthcheck
      uri:
        url: "{{ healthcheck_url }}"

  always:
    - name: Unmount ZFS datasets
      mount:
        path: "/mnt/{{ bucket }}/{{ item.key }}"
        state: unmounted
      loop: "{{ zfs | dict2items }}"

    - name: Remove old snapshots
      shell: "zfs list -t snapshot -o name {{ zfs_pool}}/{{ item.value }} | grep @backup| tac | tail -n +10| xargs -n 1 zfs destroy -r"
      loop: "{{ zfs | dict2items }}"

  delegate_to: "{{ groups['nas'][0] }}"
  become: true
